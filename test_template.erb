require 'helper'
require '<%= vars['resource_name'] %>'

# <%= mock_class_name %> = Mock<%= vars['class_name'] %><%= vars['singular'] ? 'Singular' : 'Plural' %>Backend
# Abbreviation not used outside this file

#=============================================================================#
#                            Constructor Tests
#=============================================================================#
class <%= vars['class_name'] %>ConstructorTest < Minitest::Test

  def setup
    <%= vars['class_name'] %>::BackendFactory.select(<%= mock_class_name %>::Empty)
  end
  <% if vars['empty_param_ok'] %>
  def test_accepts_empty_params
    <%=vars['class_name']%>.new
  end
  <% else %>
  def test_rejects_empty_params
    assert_raises(ArgumentError) { <%=vars['class_name']%>.new }
  end
  <% end %>
  <% if vars['scalar_param_ok'] %>
  def test_accepts_<%=vars['param_name'] %>_as_scalar
    <%=vars['class_name']%>.new('<%=vars['assert_param'] %>')
  end
  <% else %>
  def test_rejects_empty_params
    assert_raises(ArgumentError) { <%=vars['class_name']%>.new('_<%=vars['assert_param'] %>') }
  end
  <% end %>
  <% if vars['param_name'] %>
  def test_accepts_<%=vars['param_name'] %>_as_hash
    <%=vars['class_name']%>.new(<%=vars['param_name'] %>: '<%=vars['assert_param'] %>')
  end
  <% end %>
  def test_rejects_unrecognized_params
    assert_raises(ArgumentError) { <%=vars['class_name']%>.new(invalid: 9) }
  end
end

#=============================================================================#
#                               Search / Recall
#=============================================================================#
class <%=vars['class_name']%>RecallTest < Minitest::Test

  def setup
    <%=vars['class_name']%>::BackendFactory.select(<%= mock_class_name %>::Basic)
  end
  <% if vars['scalar_param_ok'] %>
  def test_search_hit_via_scalar_works
    assert <%=vars['class_name']%>.new('<%=vars['assert_param']%>').exists?
  end
  <% end %>
  <% if vars['param_name'] %>
  def test_search_hit_via_hash_works
    assert <%=vars['class_name']%>.new(<%=vars['param_name']%>: '<%=vars['assert_param']%>').exists?
  end
  <% end %>
  <% if vars['param_name'] %>
  def test_search_miss_is_not_an_exception
    refute <%=vars['class_name']%>.new(<%=vars['param_name']%>: 'non-existant').exists?
  end
  <% end %>
end

#=============================================================================#
#                               Properties
#=============================================================================#
class <%=vars['class_name']%>PropertiesTest < Minitest::Test

  def setup
    <%=vars['class_name']%>::BackendFactory.select(<%= mock_class_name %>::Basic)
  end

  <% vars['properties'].each do |property| %>
  def test_property_<%=property%>
    assert_equal('CHANGE_ME', <%=vars['class_name']%>.new('<%=vars['assert_param']%>').<%=property%>)
    assert_nil(<%=vars['class_name']%>.new(<%=vars['param_name']%>: 'non-existant').<%=property%>)
  end
  <% end %>
end


#=============================================================================#
#                               Matchers
#=============================================================================#
class <%=vars['class_name']%>MatchersTest < Minitest::Test

  def setup
    <%=vars['class_name']%>::BackendFactory.select(<%= mock_class_name %>::Basic)
  end
  <% vars['matchers'].each do |matcher| %>
  def test_matcher_<%=matcher%>_positive
    assert <%=vars['class_name']%>.new('<%=vars['assert_param']%>').<%=matcher%>?
  end

  def test_matcher_<%=matcher%>_negative
    refute <%=vars['class_name']%>.new('<%=vars['refute_param']%>').<%=matcher%>?
  end
  <% end %>
end


#=============================================================================#
#                               Test Fixtures
#=============================================================================#
module <%= mock_class_name %>
  class Empty < <%=vars['class_name']%>::Backend
    def CHANGE_ME(query)
      OpenStruct.new(CHANGE_ME: [])
    end
  end

  class Basic < <%=vars['class_name']%>::Backend
    def CHANGE_ME(query)
      fixtures = [
      ]
      OpenStruct.new({ CHANGE_ME: fixtures })
    end
  end
end